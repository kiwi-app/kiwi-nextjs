const path = require('path');
const { writeFileSync, mkdirSync, unlinkSync } = require('fs');
const { execSync } = require('child_process');
const prompts = require('prompts');
const manifest = require('./manifest');
const root = path.resolve();
const packageJson = require(`${root}/package.json`);

const handleSigTerm = () => process.exit(0);

process.on('SIGINT', handleSigTerm);
process.on('SIGTERM', handleSigTerm);

const onPromptState = (state) => {
  if (state.aborted) {
    process.stdout.write('\x1B[?25h');
    process.stdout.write('\n');
    process.exit(1);
  }
};

const modifyPackageName = async (newName) => {
  const newPackageJson = { ...packageJson, name: newName };

  writeFileSync(`${root}/package.json`, JSON.stringify(newPackageJson), {
    encoding: 'utf-8',
  });
  execSync(`npx prettier '${root}/package.json' --write`);
};

module.exports = async function (args) {
  const nameRes = await prompts({
    onState: onPromptState,
    type: 'text',
    name: 'name',
    message: 'What is your site named?',
    initial: packageJson.name,
  });

  const rootRes = await prompts(
    {
      onState: onPromptState,
      type: 'toggle',
      name: 'root',
      message: 'Enable kiwi to manage your index page (/)?',
      initial: 'Yes',
      active: 'Yes',
      inactive: 'No',
    },
    {
      onCancel: () => {
        console.error('Exiting.');
        process.exit(1);
      },
    },
  );

  console.log('Initializing kiwi...');

  if (nameRes.name !== packageJson.name) {
    console.log('Changing package.json with the new site name...');
    await modifyPackageName(nameRes.name);
  }

  const appRoot = path.resolve('./src/app/');

  if (rootRes.root) {
    try {
      console.log('Removing local root page component for kiwi root page compatibility');
      await unlinkSync(`${appRoot}/page.tsx`);
    } catch (_) {}
  }

  const SERVER_COMPONENT_PATH = `${appRoot}/(kiwi)/${rootRes.root ? '[[...kiwi]]' : '[...kiwi]'}`;
  const API_PATH = `${appRoot}/(kiwi)/api/kiwi/[...kiwi]`;

  const createKiwiFolder = () => {
    mkdirSync(SERVER_COMPONENT_PATH, { recursive: true });

    // api routes
    mkdirSync(API_PATH, { recursive: true });
  };

  const createKiwiServerFiles = () => {
    const code = `// DO NOT EDIT. This file is generated by Kiwi.
    // This file SHOULD be checked into source version control.

    import manifest from '@manifest';
    import { CatchAll } from '@kiwi-app/kiwi-nextjs';
    import ClientComponent from './client';
    import ServerComponent from './server';
    
    const Page = CatchAll(manifest, ClientComponent, ServerComponent);
    
    export default Page;    
    `;

    const clientCode = `'use client'

    // DO NOT EDIT. This file is generated by Kiwi.
    // This file SHOULD be checked into source version control.

    import manifest from '@manifest';
    import { CatchAllClient } from '@kiwi-app/kiwi-nextjs';
    
    const Page = CatchAllClient(manifest);

    export default Page;  
    `;

    const serverCode = `// DO NOT EDIT. This file is generated by Kiwi.
    // This file SHOULD be checked into source version control.

    import { CatchAllServer } from '@kiwi-app/kiwi-nextjs';
    
    export default CatchAllServer;    
    `;

    writeFileSync(`${SERVER_COMPONENT_PATH}/client.tsx`, clientCode);
    execSync(`npx prettier '${SERVER_COMPONENT_PATH}/client.tsx' --write`);

    writeFileSync(`${SERVER_COMPONENT_PATH}/server.tsx`, serverCode);
    execSync(`npx prettier '${SERVER_COMPONENT_PATH}/server.tsx' --write`);

    writeFileSync(`${SERVER_COMPONENT_PATH}/page.tsx`, code);
    execSync(`npx prettier '${SERVER_COMPONENT_PATH}/page.tsx' --write`);
  };

  const createKiwiRouteFiles = () => {
    const code = `// DO NOT EDIT. This file is generated by Kiwi.
    // This file SHOULD be checked into source version control.

    import manifest from '@manifest';
    import { LiveRoute } from '@kiwi-app/kiwi-nextjs';

    export const { GET, POST, OPTIONS, PATCH } = LiveRoute(manifest);
    `;

    writeFileSync(`${API_PATH}/route.ts`, code);
    execSync(`npx prettier '${API_PATH}/route.ts' --write`);
  };

  const updateTsConfig = () => {
    let newTsConfig;

    try {
      const configFile = require(`${root}/tsconfig.json`);

      if (configFile.compilerOptions) {
        configFile.compilerOptions.paths = {
          ...configFile.compilerOptions.paths,
          '@manifest': ['./manifest.ts'],
        };
      } else {
        configFile['compilerOptions'] = {
          paths: {
            '@manifest': ['./manifest.ts'],
          },
        };
      }

      newTsConfig = { ...configFile };
    } catch (_) {
      newTsConfig = {
        compilerOptions: {
          paths: {
            '@manifest': ['./manifest.ts'],
          },
        },
      };
    }

    writeFileSync(`${root}/tsconfig.json`, JSON.stringify(newTsConfig), {
      encoding: 'utf-8',
    });
    execSync(`npx prettier '${root}/tsconfig.json' --write`);
  };

  manifest();

  console.log('Configuring manifest alias');
  updateTsConfig();

  console.log('Creating folder structure!');
  createKiwiFolder();
  createKiwiServerFiles();
  createKiwiRouteFiles();

  console.log('Folders created!');
};
